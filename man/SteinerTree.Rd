% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/semPaths.R
\name{SteinerTree}
\alias{SteinerTree}
\title{Steiner tree via Kou's algorithm}
\usage{
SteinerTree(graph, seed, eweight)
}
\arguments{
\item{graph}{An igraph object.}

\item{seed}{A vector containing seed node identifiers, either user-defined 
or yielded by \code{\link[SEMgraph]{seedweight}}.}

\item{eweight}{Edge weight type derived from 
\code{\link[SEMgraph]{edgeweight.cfa}}, 
\code{\link[SEMgraph]{edgeweight.r2z}}, 
\code{\link[SEMgraph]{edgeweight.sem}}, 
or from user-defined distances. This option determines the 
weight-to-distance transform used to reduce the input graph. If set 
to "none" (default), edge weights will be set to 1. 
If eweight = "kegg", repressing interactions (-1) will be set to 1 
(maximum distance), neutral interactions (0) will be set to 0.5, and 
activating interactions (+1) will be set to 0 (minimum distance). 
If eweight = "zsign", all significant interactions will be set to 0 
(minimum distance), while non-significant ones will be set to 1. 
If eweight = "pvalue", weights (p-values) will be transformed to the 
inverse of negative base-10 logarithm. If eweight = "custom", the 
algorithm will use the distance measure specified by the user as "weight" 
edge attribute.}

\item{...}{arguments to be passed to or from other methods.}
}
\value{
The Steiner tree as an object of class igraph.
}
\description{
Find the Steiner tree connecting a set of seed nodes, 
using the shortest path heuristic from Kou et al. (1981).
}
\examples{
group <- c(rep(0, 17), rep(1, 15))
# Return graph properties, take the largest component, and convert 
# grapNEL to igraph
graph <- properties(kegg.pathways$hsa04540_Gap_junction)[[1]]
# Transpose data matrix: 32 subjectx (rows) x 19726 genes (columns)
data <- t(FTLDu_GSE13162)

# Generating edge weights for the KEGG interactome
graph1 <- edgeweight.r2z(graph = kegg, data = data, group = group)
graph1

# Generating seed weights
graph2 <- seedweight(graph = graph1, data = data, group=group, alpha = 5E-05)
graph2
seed <- V(graph2)$name[V(graph2)$spvlm == 1]
length(seed)

# Using -log10(P-values) as edge weights
eweight <- 1/(-log10(E(graph2)$pv))
graph3 <- SteinerTree(graph = graph2, seed = seed, eweight = eweight)
graph3
V(graph3)$color <- ifelse(V(graph3)$name \%in\% seed, "lightblue", "yellow")
V(graph3)$seed <- ifelse(V(graph3)$name \%in\% seed, 1, 0)

# KEGG-derived Steiner tree
gplot(graph3, main = "Extracted KEGG Steiner tree")
iplot(graph3)    # interactive plot

}
\references{
Kou L, Markowsky G, Berman L (1981). A fast algorithm for Steiner trees. 
Acta Informatica, 15(2): 141-145. https://doi.org/10.1007/BF00288961

Palluzzi F, Ferrari R, Graziano F, Novelli V, Rossi G, Galimberti D, 
Rainero I, Benussi L, Nacmias B, Bruni AC, Cusi D, Salvi E, Borroni B, 
Grassi M. (2017). A novel network analysis approach reveals DNA damage, 
oxidative stress and calcium/cAMP homeostasis-associated biomarkers 
in frontotemporal dementia. PLoS ONE 12(10): e0185797. 
https://doi.org/10.1371/journal.pone.0185797
}
