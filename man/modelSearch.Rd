% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/semUtils.R
\name{modelSearch}
\alias{modelSearch}
\title{Optimal model search strategies}
\usage{
modelSearch(
  graph,
  data,
  gnet,
  d = 2,
  search = "inner",
  beta = 0,
  algo = "d-sep",
  fdr = 0.2,
  showGraphs = FALSE,
  ...
)
}
\arguments{
\item{graph}{Input network as an igraph object.}

\item{data}{A matrix or data.frame. Rows correspond to subjects, and
columns to graph nodes (variables).}

\item{gnet}{Reference interaction network used to validate and import 
nodes and interactions.}

\item{d}{Maximum allowed geodesic distance for directed or undirected 
shortest path search. A distance d = 0 disables shortest path search 
(fixed in search = "basic"), while d = 1 (fixed in search = "bap") 
only search for directed links (i.e., no mediators are allowed).
A distance d > 1 (defaults d = 2 for "outer" and "inner" strategies), 
will search for shortest paths with at most d - 1 mediators between 
nodes sharing a significant estimated interaction. 
Connectors are imported from the reference interactome, as specified 
by the argument gnet. If the edges of the reference interactome are 
weighted by P-value, as defined by the E(graph)$pv attribute, the 
shortest path with the smallest weight will be chosen (e.g., see 
\code{\link[SEMgraph]{weightGraph}} for graph weighting options).}

\item{search}{Search strategy. Four model search strategies are available:
\itemize{
\item "outer". The input graph and data  are used to estimate the DAG 
providing the initial causal model backbone (see function 
\code{\link[SEMgraph]{SEMdag}}). The backbone is then processed with 
\code{\link[SEMgraph]{extendGraph}} to find new indirect paths (i.e., 
inferred directed connections that may hide new mediators). New 
interactions and mediators will be searched and imported from the 
reference network (argument gnet, see above). Both DAG and extended graph 
complexity can be controlled with beta > 0 and d > 1 arguments, 
respectively (see below). The term "outer" means that new model mediator 
variables are imported from an external resource (i.e., the reference 
network).
\item "inner" (default). This strategy is analogous to the "outer" one, 
but disables external mediator search. In other words, new indirect 
paths are generated by adding new interactions of the input model, so 
that mediators will be nodes already present in the input graph. The 
reference network is still used to validate new model paths. Also in 
this case, beta > 0 and d > 1 are used.
\item "bap". The input graph structure is improved through bow-free 
interaction search, followed by interaction validation and import from 
the reference network, with no mediators (i.e., d = 1). In this case, 
argument beta is not used, and model complexity can be controlled by 
decreasing the fdr threshold.
\item "basic". While the previous strategies rely on the input graph 
and the reference network to integrate knowledge to the final model, 
the "basic" strategy is data-driven. The input graph is needed 
to identify define the topological order. The argument gnet is set 
to NULL (i.e., no reference network is needed) and argument d = 0. 
Model complexity can be still controlled by setting beta > 0.
}}

\item{beta}{Numeric value. Minimum absolute LASSO beta coefficient for 
a new interaction to be retained in the estimated DAG backbone. Lower 
beta values correspond to more complex DAGs. By default, beta 
is set to 0 (i.e., maximum complexity).}

\item{algo}{Data adjustment method. The default correction method 
is "d-sep" (Shipley's d-separation test), only feasible for DAGs. In 
case of non-DAGs, the method is automatically changed to "ggm" 
(Gaussian Graphical Modeling). The "ggm" method can also be manually 
enabled for fast computation.}

\item{fdr}{Significance level for false discovery rate (FDR) used for 
the independence tests (by default, fdr = 0.05).}

\item{showGraphs}{If TRUE, it shows intermediate graphs during the 
execution (not recommended for large graphs).}

\item{...}{Currently ignored.}
}
\value{
A list of 3 objects:
\itemize{
\item "fit", the fitted output model (lavaan object);
\item "graph", the output model as an igraph object;
\item "data", the adjusted dataset.
}
}
\description{
This function implements different knowledge-based and 
data-driven search strategies for automatic model finding.
}
\details{
Search strategies can be ordered by decreasing conservativeness 
respect to the input graph, as: "bap", "inner", "outer", and "eqvar". 
The first three strategies are knowledge-based, since they require an 
input graph and a reference network, together with data, for 
knowledge-assisted model improvement. 
The last one does not require any reference and the output model 
structure will be completely determined by data. Output model complexity 
can be limited using arguments beta and d. For knowledge-based strategies, 
we suggest to to start with beta = 0.1. Then, beta can be relaxed 
(0 to < 0.1) to improve model fitting, if needed. Since data-driven 
models can be extremely complex, we suggest starting from beta = 0.2 
when using the "eqvar" strategy. The beta value can be relaxed until 
a good model fit is obtained (i.e., SRMR < 0.08 and deviance/df < 5).
Data adjustment is done for all strategies. The variability that cannot 
be explained by either data-driven or knowledge-based modifications is 
corrected using covariance matrix diagonalization, to adjust for possible 
confounding factors (see \code{\link[SEMgraph]{diagonalizePsi}}). 
The output model as well as the adjusted dataset are returned.
Argument fdr determines the extent of data adjustment: lower fdr values 
correspond to a smaller number of significant confounding factors, 
hence a weaker correction (default fdr = 0.2).
}
\examples{

## NOT RUN ## {

library(huge)
als.npn <- huge.npn(alsData$exprs)

# Models estimation
m1 <- modelSearch(graph = alsData$graph, data = als.npn, gnet = kegg,
		search = "bap", method = "ggm", beta = 0, fdr = 0.2)
m2 <- modelSearch(graph = alsData$graph, data = als.npn, gnet = kegg,
		search = "inner", method = "ggm", beta = 0.1, fdr = 0.2)
m3 <- modelSearch(graph = alsData$graph, data = als.npn, gnet = kegg,
		search = "outer", method = "ggm", beta = 0.1, fdr = 0.2)
m4 <- modelSearch(graph = alsData$graph, data = als.npn, gnet = NULL,
		search = "basic", method = "ggm", beta = 0.2, fdr = 0.2)

# Graphs
par(mfrow=c(2,2), mar= rep(1,4))
gplot(m1$graph, main = "bap graph")
gplot(m2$graph, main = "inner graph")
gplot(m3$graph, main = "outer graph")
gplot(m4$graph, main = "basic graph")

## }

}
