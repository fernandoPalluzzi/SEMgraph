% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/semUtils.R
\name{extractClusters}
\alias{extractClusters}
\title{Cluster extraction utility}
\usage{
extractClusters(
  graph,
  data,
  group = NULL,
  membership = NULL,
  map = FALSE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{graph}{Input network as an igraph object.}

\item{data}{A matrix or data.frame. Rows correspond to subjects, and
columns to graph nodes (variables).}

\item{group}{A binary vector. This vector must be as long as the
number of subjects. Each vector element must be 1 for cases and 0
for control subjects. Group specification enables node perturbation 
testing. By default, group = NULL.}

\item{membership}{A vector of cluster membership IDs. If NULL, clusters 
will be automatically generated with \code{\link[SEMgraph]{clusterGraph}} 
using the edge betweenness clustering ("ebc") algorithm.}

\item{map}{Logical value. If TRUE, the plot of the input graph
(coloured by cluster membership) will be generated along with independent 
module plots. If the input graph is very large, plotting could be 
computationally intensive (by default, map = FALSE).}

\item{verbose}{Logical value. If TRUE, a plot will be showed for each 
cluster.}

\item{...}{Currently ignored.}
}
\value{
List of clusters as igraph objects and fitting results for 
each cluster as a lavaan object.
}
\description{
Extract and fit clusters from an input graph.
}
\examples{

library(huge)
als.npn <- huge.npn(alsData$exprs)

# Clusters creation
adjdata <- diagonalizePsi(graph = alsData$graph, data = als.npn,
                          algo = "ggm",
                          method = "BH",
                          alpha = 0.05)
clusters <- extractClusters(graph = alsData$graph, data = adjdata)
head(parameterEstimates(clusters$fit$HM1))
head(parameterEstimates(clusters$fit$HM2))
head(parameterEstimates(clusters$fit$HM4))
gplot(clusters$clusters$HM2)

# Map cluster on the input graph
g<- alsData$graph
c<- clusters$clusters$HM2
V(g)$color<- ifelse(V(g)$name \%in\% V(c)$name, "yellow", "white")
gplot(g)

}
