% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/semWeights.R
\name{activeModule}
\alias{activeModule}
\title{Active module identification}
\usage{
activeModule(
  graph,
  type,
  seed,
  eweight = "none",
  alpha = 0.05,
  q = 0.5,
  limit = NULL,
  ...
)
}
\arguments{
\item{graph}{An igraph object.}

\item{type}{Module identification method. If type = "kou", the Steiner 
tree algorithm will be applied. 
If type = "usp", the resulting graph will be the union of all significant 
shortest paths. If type = "rwr", the random walk with restart algorithm 
will be enabled. Finally, if type = "hdi", the heat diffusion algorithm 
is used.}

\item{seed}{Either a user-defined vector containing seed node names 
or one among: "pvlm", "proto", or "qi", corresponding to the seed 
name attribute yielded by \code{\link[SEMgraph]{weightGraph}}.}

\item{eweight}{Edge weight type derived from
\code{\link[SEMgraph]{weightGraph}} or from user-defined distances. 
This option determines the weight-to-distance transform. If set to 
"none" (default), edge weights will be set to 1. If eweight = "kegg", 
repressing interactions (-1) will be set to 1 (maximum distance), 
neutral interactions (0) will be set to 0.5, and activating interactions 
(+1) will be set to 0 (minimum distance).
If eweight = "zsign", all significant interactions will be set to 0
(minimum distance), while non-significant ones will be set to 1.
If eweight = "pvalue", weights (p-values) will be transformed to the
inverse of negative base-10 logarithm. If eweight = "custom", the
algorithm will use the distance measure specified by the user as "weight"
edge attribute.}

\item{alpha}{Significance level to assess shortest paths significance, 
when type is "usp". By default, alpha is set to 0.05.}

\item{q}{Inclusion quantile for the "rwr" and "hdi" algorithms. The higher 
the q, the closer the nodes to the input seeds, the smaller the output 
graph induced by the q-top ranking nodes. By default, q = 0.5 (i.e., the 
top 50\% of nodes are selected).}

\item{limit}{An integer value corresponding to the number of graph 
edges. If \code{type = "usp"}, beyond this limit, multicore computation 
is enabled to reduce the computational burden. 
By default, \code{limit = NULL} (i.e., multicore disabled).}

\item{...}{Currently ignored.}
}
\value{
An active module of class \code{\link{igraph}}.
}
\description{
Uses different information flow and tree-based strategies 
for identifying active modules (e.g., disease modules), showing a 
perturbed subset of nodes and edges. 
Function scalability enables graph reduction at both pathway and 
entire interactome scales.
}
\details{
Graph filtering algorithms include:
\enumerate{
\item "kou", the Steiner tree connecting a set of seed nodes, using 
the algorithm from Kou et al. (1981);
\item "usp", generates a subnetwork as the union of the significant 
(P-value < alpha) shortest paths between the seeds set;
\item "rwr", Random Walk with Restart; wrapper for random.walk of the 
R package diffusr;
\item "hdi", Heat Diffusion algorithm; wrapper for heat.diffusion of 
the R package diffusr.
}
}
\examples{

# Graph weighting
G <- weightGraph(graph = sachs$graph, data = sachs$pkc, group = sachs$group,
                 method = "r2z",
                 seed = c(0.05, 0.5, 0.5))

# RWR algorithm, seeds and edge P-values as weights
R1 <- activeModule(graph = G, type = "kou", seed = "pvlm", eweight = "pvalue")
R2 <- activeModule(graph = G, type = "kou", seed = "proto", eweight = "pvalue")
R3 <- activeModule(graph = G, type = "kou", seed = "qi", eweight = "pvalue")

# Graphs
par(mfrow=c(2,2), mar=rep(2, 4))
plot(G, layout = layout.circle, main = "input graph")
box(col = "gray")
plot(R1, layout = layout.circle, main = "lm P-value (alpha = 0.05)")
box(col = "gray")
plot(R2, layout = layout.circle, main = "prototype (h = 0.5)")
box(col = "gray")
plot(R3, layout = layout.circle, main = "closeness (q = 0.5)")
box(col = "gray")

\dontrun{

# Weight and reduce the whole KEGG interactome, using RWR

kegg1 <- weightGraph(kegg, alsData$exprs, alsData$group,
                     method = "r2z",
                     seed = c(5E-8, 0.5, 0.5))

# Set quantile value, based on the top k nodes
k <- sum(V(kegg1)$pvlm)
q <- 1 - k/vcount(kegg1)

ig1 <- activeModule(graph = kegg1, type = "rwr", seed = "pvlm",
                    eweight = "pvalue",
                    q = q)
ig1 <- graph2dag(ig1, alsData$exprs)
ig1 <- properties(ig1)[[1]]

# Fitting
sem1 <- SEMrun(ig1, alsData$exprs, alsData$group, fit = 1, algo = "ricf")
summary(sem1$gest)
gplot(sem1$graph)

}

}
\references{
Grassi M, Palluzzi F (2021). SEMgraph: An R Package for Causal Network 
Analysis of High-Throughput Data with Structural Equation Models. 
xxxxx x(x): xxxxx. https://doi.org/xxxxx

Kou L, Markowsky G, Berman L (1981). A fast algorithm for Steiner trees.
Acta Informatica, 15(2): 141-145. https://doi.org/10.1007/BF00288961

Simon Dirmeier (2018). diffusr: Network Diffusion Algorithms. R
package version 0.1.4.
https://CRAN.R-project.org/package=diffusr
}
\author{
Mario Grassi \email{mario.grassi@unipv.it}
}
